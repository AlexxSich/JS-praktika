{"version":3,"file":"commonHelpers5.js","sources":["../src/js/promises.js"],"sourcesContent":["// const delay = Math.random() * 2000;\n\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     const random = Math.random();\n//     if (random > 0.5) {\n//       resolve(delay);\n//     } else {\n//       reject(delay);\n//     }\n//   }, delay);\n// });\n\n// promise\n//   .then(message => {\n//     console.log(message, 'Ok');\n//   })\n//   .catch(message => {\n//     console.log(message, 'Error');\n//   })\n//   .finally(console.log('Final'));\n\n// =========================================\n// function onFulfiled(message) {\n//   console.log(message, 'Ok');\n// }\n\n// function onRejected(message) {\n//   console.log(message, 'Error');\n// }\n\n// ===============================\n\n// const promise = new Promise((resolve, reject) => {\n//   if (Math.random() > 0.5) {\n//     resolve('Hello');\n//   } else {\n//     reject('Sorry');\n//   }\n// });\n\n// promise\n//   .then(value => {\n//     console.log(value);\n//   })\n//   .catch(error => {\n//     console.log(error);\n//   })\n//   .finally(() => {\n//     console.log('The End');\n//   });\n\n// =============================\n// Промісіфікація - це функція яка повертає проміс\n// '✅', '❌'\n//\n\n// function foo() {\n//   const promise = new Promise(resolve => {\n//     resolve(10);\n//   });\n//   return promise;\n// }\n\n// function createPromise(delay, state, value) {\n//   const promise = new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (state === 'green') {\n//         resolve(value);\n//       } else {\n//         reject(value);\n//       }\n//     }, delay);\n//   });\n//   return promise;\n// }\n\n// const p1 = createPromise(5000, 'green', 'p1');\n// const p2 = createPromise(2000, 'red', 'p2');\n// const p3 = createPromise(4000, 'green', 'p3');\n\n// p1.then(onFulfilled).catch(onRejected);\n// p2.then(onFulfilled).catch(onRejected);\n// p3.then(onFulfilled).catch(onRejected);\n\n// function onFulfilled(data) {\n//   console.log(`✅ - ${data}`);\n// }\n\n// function onRejected(data) {\n//   console.log(`❌ - ${data}`);\n// }\n\n// методи обєкта Promise\n// Promise.resolve()\n// Promise.reject()\n\n// function foo() {\n//   const arr = [];\n//   return Promise.resolve(arr);\n// }\n// ===================================================\nfunction createPromise(delay, isActive, value) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (isActive) {\n        resolve(value);\n      } else {\n        reject(value);\n      }\n    }, delay);\n  });\n  return promise;\n}\n\nconst p1 = createPromise(1000, true, 'p1');\nconst p2 = createPromise(4000, true, 'p2');\nconst p3 = createPromise(3000, false, 'p3');\nconst p4 = createPromise(5000, true, 'p4');\n\nconst promisesArr = [p1, p2, p3, p4];\n\n// Promise.all повертає масив промісів, якщо всі повернулися без помилок то виводить. якщо є помилка, то повертає тільки значення помилки\nPromise.all(promisesArr)\n  .then(result => {\n    console.log(result);\n  })\n  .catch(err => {\n    console.log(err);\n  });\n\n// Promise.allSettled повертає масив промісів, і з помилками і без.\nPromise.allSettled(promisesArr).then(result => {\n  console.log(result);\n});\n\n// Promise.race повертає значення першого виконаного промісу\nPromise.race(promisesArr)\n  .then(value => {\n    console.log(value);\n  })\n  .catch(err => {\n    console.log(err);\n  });\n"],"names":["createPromise","delay","isActive","value","resolve","reject","p1","p2","p3","p4","promisesArr","result","err"],"mappings":"wFAsGA,SAASA,EAAcC,EAAOC,EAAUC,EAAO,CAU7C,OATgB,IAAI,QAAQ,CAACC,EAASC,IAAW,CAC/C,WAAW,IAAM,CACXH,EACFE,EAAQD,CAAK,EAEbE,EAAOF,CAAK,CAEf,EAAEF,CAAK,CACZ,CAAG,CAEH,CAEA,MAAMK,EAAKN,EAAc,IAAM,GAAM,IAAI,EACnCO,EAAKP,EAAc,IAAM,GAAM,IAAI,EACnCQ,EAAKR,EAAc,IAAM,GAAO,IAAI,EACpCS,EAAKT,EAAc,IAAM,GAAM,IAAI,EAEnCU,EAAc,CAACJ,EAAIC,EAAIC,EAAIC,CAAE,EAGnC,QAAQ,IAAIC,CAAW,EACpB,KAAKC,GAAU,CACd,QAAQ,IAAIA,CAAM,CACtB,CAAG,EACA,MAAMC,GAAO,CACZ,QAAQ,IAAIA,CAAG,CACnB,CAAG,EAGH,QAAQ,WAAWF,CAAW,EAAE,KAAKC,GAAU,CAC7C,QAAQ,IAAIA,CAAM,CACpB,CAAC,EAGD,QAAQ,KAAKD,CAAW,EACrB,KAAKP,GAAS,CACb,QAAQ,IAAIA,CAAK,CACrB,CAAG,EACA,MAAMS,GAAO,CACZ,QAAQ,IAAIA,CAAG,CACnB,CAAG"}