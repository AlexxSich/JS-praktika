{"version":3,"file":"commonHelpers8.js","sources":["../src/js/usersAPI.js","../src/js/usersCards.js"],"sourcesContent":["// run the server - npx json-server db.json\n\n// ================ REQUEST TO SERVER ====================================\n// ================ GET ===============================================\nexport function getUsers() {\n  const BASE_URL = 'http://localhost:3000';\n  const END_POINT = '/users';\n\n  const url = `${BASE_URL}${END_POINT}`;\n\n  return fetch(url).then(res => res.json());\n}\n\n// ==================== POST ======================\n// відправляємо данні на сервер які збираємо в обєкт userObj з форми Create user card і перетворюємо\n// їх в формат JSON\n// після відправки отримуємо відповідь від сервера обєкт (res - response) з даними які були записані\n// в ціому обєкті є купа різної інфи, і є метод .json() в якому знаходяться наші дані які\n// записалися в базу і за допомогою then(res => res.json()) отримуємо їх\n\nexport function createUser(userObj) {\n  const BASE_URL = 'http://localhost:3000';\n  const END_POINT = '/users';\n  const url = `${BASE_URL}${END_POINT}`;\n\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userObj),\n  };\n\n  return fetch(url, options).then(res => res.json());\n}\n\n// ======================= PATCH ========================\n\nexport function updateUser({ id, ...user }) {\n  const BASE_URL = 'http://localhost:3000';\n  const END_POINT = '/users';\n  const url = `${BASE_URL}${END_POINT}/${id}`;\n\n  const options = {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(user),\n  };\n\n  return fetch(url, options).then(res => res.json());\n} //\n\n// ======================== PUT =========================\n\nexport function rewriteUser({ id, ...user }) {\n  const BASE_URL = 'http://localhost:3000';\n  const END_POINT = '/users';\n  const url = `${BASE_URL}${END_POINT}/${id}`;\n\n  const options = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(user),\n  };\n\n  return fetch(url, options).then(res => res.json());\n}\n\n// ========================  DELETE =========================\nexport function deleteUser(id) {\n  const BASE_URL = 'http://localhost:3000';\n  const END_POINT = '/users';\n  const url = `${BASE_URL}${END_POINT}/${id}`;\n\n  const options = {\n    method: 'DELETE',\n  };\n\n  return fetch(url, options).then(res => res.json());\n}\n","import { deleteUser, getUsers } from './usersAPI';\nimport { createUser } from './usersAPI';\nimport { rewriteUser } from './usersAPI';\nimport { updateUser } from './usersAPI';\n\nconst refs = {\n  userListElem: document.querySelector('.users-cards'),\n  createUserForm: document.querySelector('.create-user'),\n  updateUserForm: document.querySelector('.update-user'),\n  resetUserForm: document.querySelector('.rewrite-user'),\n  deleteUserForm: document.querySelector('.delete-user'),\n};\n\nrefs.createUserForm.addEventListener('submit', onCreateUser);\nrefs.resetUserForm.addEventListener('submit', onResetUser);\nrefs.updateUserForm.addEventListener('submit', onUpdateUser);\nrefs.deleteUserForm.addEventListener('submit', onDeleteUser);\n\n// ================================================================\n\n// ================================================================\n// для того щоб відрендерити щось потрібно три функції якщо масив\n// 1. функція яка створює розмітку для одного елемента\n// 2. функція яка створить розмітку для масива\n// 3. функція яка вставить це в розмітку\n// ===============================================================\n\n// 1. функція яка створює розмітку для одного елемента, приймає обєкт\n\nfunction userTemplate(user) {\n  return `<li class=\"user-card\" data-id=\"${user.id}\">\n        <img             \n            src='https://source.unsplash.com/720x1280/?random=${user.id}&girl,portret, celebrity' alt=\"#\"\n            class=\"user-avatar\" >\n        <h3 class=\"user-title\">${user.name}</h3>\n         <p class=\"contact-item\">Phone: ${user.phone}</p>\n         <p class=\"contact-item\">Email: ${user.email}</p>\n         <button class=\"btn-delete\" type=\"button\">Delete</button>\n        </li>`;\n}\n\n// =======================================================================\n// 2. функція яка створить розмітку для масива, вона приймає масив обэктів.\n//  за допомогою map() ми перетворюємо кожен обєкт в цьому масиві arr на розмітку,\n//  використовуючи нашу функцію userTemplate() яка створює розмітку для одного елемента\n\nfunction usersTemplate(arr) {\n  return arr.map(userTemplate).join('');\n}\n\n// ========================================================================\n\n// 3. Після того як зробили запит на сервер за допомогою функціїї getUsers() from usersAPI.js\n// приймаємо then(users) масив данних users  створюємо для нього розмітку markup\n// за допомогою функції usersTemplate(arr) і вставляємо розмітку на сторінку в контейнер 'users-cards-container'\n//\n//\n\ngetUsers().then(users => {\n  const markup = usersTemplate(users);\n  refs.userListElem.innerHTML = markup;\n});\n\n// ==================Create User========================================\n// Збираємо данні з inputs форми create user card\nfunction onCreateUser(event) {\n  event.preventDefault();\n\n  // збираємо данні з форми\n  const userObj = {\n    name: refs.createUserForm.elements.userName.value.trim(),\n    phone: refs.createUserForm.elements.userPhone.value.trim(),\n    email: refs.createUserForm.elements.userEmail.value.trim(),\n    img: 'https://source.unsplash.com/720x1280/?random=${Math.random()}&girl,portret, celebrity',\n  };\n\n  // тут викликаємо функцію яка передає данні на сервер методом POST і передаємо їй наш обєкт з данними які ми зібрали з форми\n  // після отримуємо відповідь вже с сервера з ціми данними які вже записалися в базу данних, за допомогою then()\n  // і вставляємо їх на нашу сторінку - створюючи розмітку за допомогою функціїї userTemplate яку ми\n  // створили для одного елемента\n\n  createUser(userObj).then(newUser => {\n    const markup = userTemplate(newUser);\n    refs.userListElem.insertAdjacentHTML('afterbegin', markup);\n  });\n  event.target.reset();\n}\n\n// ================= RESET-REWRITE USER==========================\n// при оновленні данних юзера треба знову зібрати данні які він ввів у форму\n// це можна зробити як і при створенні юзера через input.value але тут зробимо через FormData\n// це клас який створений, щоб працювати з формами і йому треба вказати з якою формою він\n// буде працювати, в цьому випадку це форма resetUserForm, у цього обєкта FormData є метод\n// forEach який перебирає поля форми і якщо у нас багато полів, то це дуже зручно використовувати\n// метод forEach від дуже швидко пройдеться по всім полям input і не треба для кожного поля\n// окремо створювати змінні і туди записувати данні з полів input.\n//  Таким чином в обєкті  myData створюємо властивість  key зі значенням value і після циклу\n// forEach в нашому обєкті  myData будуть данні з усіх полів input форми resetUserForm\n// key береться з HTML з полів input властивість name=''\n\nfunction onResetUser(event) {\n  event.preventDefault();\n\n  const formData = new FormData(refs.resetUserForm);\n  const myData = {};\n\n  formData.forEach((value, key) => {\n    myData[key] = value;\n  });\n\n  // для того щоб замінити юзера, карточку юзера треба спочатку знайти\n  // робимо це через document.querySelector по data-id після того як вона знайдена вставляємо\n  //  після неї нову карточку за доромогою .insertAdjacentHTML('afterend', markup)\n  // а стару карточку видаляємо oldUser.remove()\n\n  rewriteUser(myData).then(updatedUser => {\n    const markup = userTemplate(updatedUser);\n    const oldUser = document.querySelector(`[data-id=\"${myData.id}\"]`);\n    oldUser.insertAdjacentHTML('afterend', markup);\n    oldUser.remove();\n  });\n\n  event.target.reset();\n}\n\n//const obj = {};            це пустий обєкт\n//obj.name = 'Alex';         це статичне звернення, додаємо в обєкт властивість name (key) зі значенням Alex (value)\n// obj['name'] = 'Alex';     те саме але це динамічне звернення і плюс такого методу\n//                           що сюди можна підставити змінну яка створена раніше\n\n// const key = 'name';       змінна key\n// obj[key] = 'Alex';        за допомогою змінної key ми записали в обєкт властивість name (key) зі значенням Alex (value)\n\n// const obj = {};\n// const key = 'name';       тепер за допомогою двох змінних ми записали в обєкт\n// const value = 'Alex';     властивість name (key) зі значенням Alex (value)\n// obj[key] = value;         тобто ми отримали obj = {name: 'Alex'} це дозволяє динамічно записувати дані в обєкт\n\n// ================= UPDATE USER ==========================\nfunction onUpdateUser(event) {\n  event.preventDefault();\n\n  const myData = {};\n  const formData = new FormData(refs.updateUserForm);\n\n  formData.forEach((value, key) => {\n    if (value) {\n      myData[key] = value;\n    }\n  });\n\n  updateUser(myData).then(updatedUser => {\n    const markup = userTemplate(updatedUser);\n    const oldUser = document.querySelector(`[data-id=\"${myData.id}\"]`);\n    oldUser.insertAdjacentHTML('afterend', markup);\n    oldUser.remove();\n  });\n\n  event.target.reset();\n}\n\n// ================= DELETE USER ==========================\nfunction onDeleteUser(event) {\n  event.preventDefault();\n\n  const id = refs.deleteUserForm.elements.userId.value;\n\n  deleteUser(id)\n    .then(() => {\n      const oldUser = document.querySelector(`[data-id=\"${id}\"]`);\n      oldUser.remove();\n    })\n    .catch(err => {\n      console.log(err);\n    });\n\n  event.target.reset();\n}\n"],"names":["getUsers","res","createUser","userObj","url","options","updateUser","id","user","rewriteUser","deleteUser","refs","onCreateUser","onResetUser","onUpdateUser","onDeleteUser","userTemplate","usersTemplate","arr","users","markup","event","newUser","formData","myData","value","key","updatedUser","oldUser","err"],"mappings":"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"}